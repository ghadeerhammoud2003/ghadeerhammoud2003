import logging
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# Dictionary to store chat_id pairs
chat_id_dict = {}

def start(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    update.message.reply_text('Hi! Start chatting and I will connect you with a stranger.')

def chat(update: Update, context: CallbackContext) -> None:
    """Echo the user message."""
    user_chat_id = update.message.chat_id
    text = update.message.text

    # Check if user is already in a chat
    if user_chat_id in chat_id_dict:
        # Get the chat_id of the partner
        partner_chat_id = chat_id_dict[user_chat_id]
        # Forward the message to the partner
        context.bot.send_message(chat_id=partner_chat_id, text=text)
    else:
        # If user is not in a chat, store the user's message
        chat_id_dict[user_chat_id] = {'text': text}

def error(update: Update, context: CallbackContext) -> None:
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)

def main() -> None:
    """Start the bot."""
    updater = Updater("6970097782:AAEyp5bBAWpGdVb35-nV0mJxEFZa1FO3EDg", use_context=True)

    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, chat))

    dp.add_error_handler(error)

    updater.start_polling()

    updater.idle()

if __name__ == '__main__':
    main()
